import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;

public class Main {

    /**
     *  
     * Implementation based on Sieve of Eratosthenes
     * 
     * by using a bit array.
     * Java doesnt have unsigned int else 
     * max value of int is 
     * which is half of the given constraint.
     * So we could use a unsigned int.
     *
     * given constraints:
     * Calculates only upto 4,294,967,295 (as per PS)
     * 
     *
     */

    static void printPrimeNumbersUpto(long limit) {
        long primeNumbers=Long.MAX_VALUE;

        primeNumbers &= ~(1 << 0);
        //primeNumbers &= ~(1 << 0);
        System.out.println("limit:"+limit);

        for (long i=2;i<limit;i++) {
            long j=2;
            while(i*j<limit) {
                System.out.println("unset: "+i*j);
                primeNumbers &= ~(1 << i*j);
                j++;
            }
        }

        System.out.println("limit:"+limit);        

        for(int k=2;k<limit;k++) {
            
            if ((primeNumbers & (1L << k)) != 0){
                if(k>2)
                    System.out.print(",");
                System.out.print(k);
            }   
        }
        
        
        //return primeNumbers;
    } 


	public static void main (String[] args) {

        try {
            File file = new File(args[0]);
            BufferedReader in = new BufferedReader(new FileReader(file));
            String line;
            while ((line = in.readLine()) != null) {
                
                if (line.length() > 0) {
                    System.out.println("limit:"+Integer.parseInt(line));
                    printPrimeNumbersUpto(Integer.parseInt(line));
                    System.out.println();
                    
                }
            }
        } catch (IOException e) {
            System.out.println("File Read Error: " + e.getMessage());
        }
	}
}
